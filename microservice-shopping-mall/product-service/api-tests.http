# # ========================================
# # 자동화된 Product Service API 테스트
# # product-service/automated-api-tests.http
# # ========================================

# ### 환경 변수 설정
# @baseUrl = http://localhost:3003
# @apiVersion = v1

# # ========================================
# # STEP 1: 루트 카테고리 생성 및 변수 추출
# # ========================================
# POST {{baseUrl}}/api/{{apiVersion}}/categories
# Content-Type: application/json

# {
#   "name": "전자제품",
#   "description": "모든 전자제품을 포함하는 최상위 카테고리",
#   "slug": "electronics"
# }

# # @name createRootCategory

# ###

# # ========================================
# # STEP 2: 하위 카테고리 생성 (변수 자동 사용)
# # ========================================
# POST {{baseUrl}}/api/{{apiVersion}}/categories
# Content-Type: application/json

# {
#   "name": "컴퓨터",
#   "description": "데스크톱, 노트북, 태블릿 등",
#   "slug": "computers",
#   "parentId": "{{createRootCategory.response.body.data.category.id}}"
# }

# # @name createSubCategory

# ###

# # ========================================
# # STEP 3: 첫 번째 상품 생성 (MacBook)
# # ========================================
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "MacBook Pro 16인치 M3 Pro",
#   "description": "Apple M3 Pro 칩, 18GB 통합 메모리, 512GB SSD 스토리지",
#   "price": 3190000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "Apple",
#   "sku": "MBP-16-M3-512-SG",
#   "weight": 2.1,
#   "dimensions": {
#     "width": 35.57,
#     "height": 24.81,
#     "depth": 1.68
#   },
#   "tags": ["노트북", "맥북", "애플", "M3"],
#   "initialStock": {
#     "quantity": 50,
#     "lowStockThreshold": 10,
#     "location": "WAREHOUSE-A"
#   }
# }

# # @name createMacBook

# ###

# # ========================================
# # STEP 4: 두 번째 상품 생성 (iPhone)
# # ========================================
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "iPhone 15 Pro Max",
#   "description": "티타늄 디자인과 A17 Pro 칩이 탑재된 iPhone 15 Pro Max",
#   "price": 1550000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "Apple",
#   "sku": "IPH-15-PM-256-NT",
#   "weight": 0.221,
#   "dimensions": {
#     "width": 7.69,
#     "height": 15.95,
#     "depth": 0.83
#   },
#   "tags": ["스마트폰", "아이폰", "애플", "A17"],
#   "initialStock": {
#     "quantity": 100,
#     "lowStockThreshold": 20,
#     "location": "WAREHOUSE-A"
#   }
# }

# # @name createIPhone

# ###

# # ========================================
# # STEP 5: 세 번째 상품 생성 (Galaxy)
# # ========================================
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "Galaxy S24 Ultra",
#   "description": "AI 기능과 S펜이 내장된 프리미엄 갤럭시 스마트폰",
#   "price": 1398000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "Samsung",
#   "sku": "GAL-S24U-512-TB",
#   "weight": 0.232,
#   "dimensions": {
#     "width": 7.96,
#     "height": 16.24,
#     "depth": 0.86
#   },
#   "tags": ["스마트폰", "갤럭시", "삼성", "AI"],
#   "initialStock": {
#     "quantity": 75,
#     "lowStockThreshold": 15,
#     "location": "WAREHOUSE-B"
#   }
# }

# # @name createGalaxy

# ###

# # ========================================
# # STEP 6: 상품 상세 조회 (자동 변수)
# # ========================================
# GET {{baseUrl}}/api/{{apiVersion}}/products/{{createMacBook.response.body.data.product.id}}
# Content-Type: application/json

# ###

# # ========================================
# # STEP 7: 상품 목록 조회 테스트들
# # ========================================

# # 기본 목록 조회
# GET {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# ###

# # Apple 브랜드 필터링
# GET {{baseUrl}}/api/{{apiVersion}}/products?brand=Apple
# Content-Type: application/json

# ###

# # Samsung 브랜드 필터링
# GET {{baseUrl}}/api/{{apiVersion}}/products?brand=Samsung
# Content-Type: application/json

# ###

# # 가격대 필터링 (100만원~200만원)
# GET {{baseUrl}}/api/{{apiVersion}}/products?minPrice=1000000&maxPrice=2000000
# Content-Type: application/json

# ###

# # 검색 테스트 (MacBook)
# GET {{baseUrl}}/api/{{apiVersion}}/products?search=MacBook
# Content-Type: application/json

# ###

# # 검색 테스트 (스마트폰)
# GET {{baseUrl}}/api/{{apiVersion}}/products?search=스마트폰
# Content-Type: application/json

# ###

# # 가격 내림차순 정렬
# GET {{baseUrl}}/api/{{apiVersion}}/products?sortBy=price_desc
# Content-Type: application/json

# ###

# # 가격 오름차순 정렬
# GET {{baseUrl}}/api/{{apiVersion}}/products?sortBy=price_asc
# Content-Type: application/json

# ###

# # 이름 정렬
# GET {{baseUrl}}/api/{{apiVersion}}/products?sortBy=name_asc
# Content-Type: application/json

# ###

# # 페이지네이션 테스트
# GET {{baseUrl}}/api/{{apiVersion}}/products?page=1&limit=2
# Content-Type: application/json

# ###

# GET {{baseUrl}}/api/{{apiVersion}}/products?page=2&limit=2
# Content-Type: application/json

# ###

# # ========================================
# # STEP 8: 카테고리 조회 테스트들
# # ========================================

# # 카테고리 목록 조회
# GET {{baseUrl}}/api/{{apiVersion}}/categories
# Content-Type: application/json

# ###

# # 특정 카테고리 조회 (루트)
# GET {{baseUrl}}/api/{{apiVersion}}/categories/{{createRootCategory.response.body.data.category.id}}
# Content-Type: application/json

# ###

# # 특정 카테고리 조회 (하위)
# GET {{baseUrl}}/api/{{apiVersion}}/categories/{{createSubCategory.response.body.data.category.id}}
# Content-Type: application/json

# ###

# # 카테고리별 상품 조회
# GET {{baseUrl}}/api/{{apiVersion}}/products?categoryId={{createSubCategory.response.body.data.category.id}}
# Content-Type: application/json

# ###

# # ========================================
# # STEP 9: 에러 케이스 테스트들
# # ========================================

# # 존재하지 않는 상품 조회
# GET {{baseUrl}}/api/{{apiVersion}}/products/non-existent-uuid-12345
# Content-Type: application/json

# ###

# # 잘못된 상품 생성 (필수 필드 누락)
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "description": "상품명이 없는 상품",
#   "price": 10000
# }

# ###

# # 중복 SKU 테스트
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "중복 SKU 테스트",
#   "description": "이미 존재하는 SKU로 생성 시도",
#   "price": 50000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "TestBrand",
#   "sku": "MBP-16-M3-512-SG"
# }

# ###

# # 음수 가격 테스트
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "잘못된 가격 테스트",
#   "description": "음수 가격으로 상품 생성 시도",
#   "price": -10000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "TestBrand",
#   "sku": "INVALID-PRICE-001"
# }

# ###

# # 빈 문자열 상품명 테스트
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "",
#   "description": "빈 상품명으로 생성 시도",
#   "price": 10000,
#   "categoryId": "{{createSubCategory.response.body.data.category.id}}",
#   "brand": "TestBrand",
#   "sku": "EMPTY-NAME-001"
# }

# ###

# # 존재하지 않는 카테고리로 상품 생성
# POST {{baseUrl}}/api/{{apiVersion}}/products
# Content-Type: application/json

# {
#   "name": "잘못된 카테고리 테스트",
#   "description": "존재하지 않는 카테고리로 상품 생성",
#   "price": 50000,
#   "categoryId": "non-existent-category-id",
#   "brand": "TestBrand",
#   "sku": "INVALID-CAT-001"
# }

# ###

# # ========================================
# # STEP 10: 헬스 체크
# # ========================================
# GET {{baseUrl}}/health
# Content-Type: application/json

# ###